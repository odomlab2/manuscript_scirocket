[
  {
    "objectID": "workflows/1.benchmarking.html",
    "href": "workflows/1.benchmarking.html",
    "title": "Benchmarking of sci-rocket",
    "section": "",
    "text": "This workflow will visualize the benchmarking of two sci-RNA-seqv3 data-set consisting of a large cohort of Four Core Genotypes (FCG) mice (FCG; 11.3 billion mate-pairs) and a smaller Danio Rerio cohort (490 million mate-pairs) in which additional nuclear oligo hashing barcodes were added.\n\n\nShow code\nlibrary(dplyr)\nlibrary(patchwork)\nsource('misc_functions.R')\n\n# Parallel options.\nfuture::plan(strategy = future::multisession(workers = 10))\n\n# Set seed.\nbase::set.seed(708813)\n\n# Location of benchmarking logs.\nfiles_benchmark &lt;- list.files('~/DKFZ/odomLab/manuscript_scirocket/benchmarks/', full.names = T)\n\n\n\n\n\n\nShow code\ncohorts &lt;- readr::read_tsv('../config/testing_samplesheet.tsv', show_col_types = FALSE)\n\ncohorts %&gt;% \n    dplyr::group_by(experiment_name) %&gt;% \n    dplyr::summarise(n = dplyr::n_distinct(sample_name), .groups = 'keep') %&gt;% \n    dplyr::ungroup() %&gt;% \n    dplyr::select(`Cohort` = experiment_name, `Total samples` = n) %&gt;% \n    knitr::kable() %&gt;% \n    kableExtra::kable_styling(bootstrap_options = \"striped\", full_width = FALSE)\n\n\n\n\n\n\nCohort\n\n\nTotal samples\n\n\n\n\n\n\nsx42b\n\n\n48\n\n\n\n\ntest_hashing\n\n\n1\n\n\n\n\nOverview of cohorts",
    "crumbs": [
      "Benchmarking",
      "Benchmarking of sci-rocket"
    ]
  },
  {
    "objectID": "workflows/1.benchmarking.html#introduction",
    "href": "workflows/1.benchmarking.html#introduction",
    "title": "Benchmarking of sci-rocket",
    "section": "",
    "text": "This workflow will visualize the benchmarking of two sci-RNA-seqv3 data-set consisting of a large cohort of Four Core Genotypes (FCG) mice (FCG; 11.3 billion mate-pairs) and a smaller Danio Rerio cohort (490 million mate-pairs) in which additional nuclear oligo hashing barcodes were added.\n\n\nShow code\nlibrary(dplyr)\nlibrary(patchwork)\nsource('misc_functions.R')\n\n# Parallel options.\nfuture::plan(strategy = future::multisession(workers = 10))\n\n# Set seed.\nbase::set.seed(708813)\n\n# Location of benchmarking logs.\nfiles_benchmark &lt;- list.files('~/DKFZ/odomLab/manuscript_scirocket/benchmarks/', full.names = T)\n\n\n\n\n\n\nShow code\ncohorts &lt;- readr::read_tsv('../config/testing_samplesheet.tsv', show_col_types = FALSE)\n\ncohorts %&gt;% \n    dplyr::group_by(experiment_name) %&gt;% \n    dplyr::summarise(n = dplyr::n_distinct(sample_name), .groups = 'keep') %&gt;% \n    dplyr::ungroup() %&gt;% \n    dplyr::select(`Cohort` = experiment_name, `Total samples` = n) %&gt;% \n    knitr::kable() %&gt;% \n    kableExtra::kable_styling(bootstrap_options = \"striped\", full_width = FALSE)\n\n\n\n\n\n\nCohort\n\n\nTotal samples\n\n\n\n\n\n\nsx42b\n\n\n48\n\n\n\n\ntest_hashing\n\n\n1\n\n\n\n\nOverview of cohorts",
    "crumbs": [
      "Benchmarking",
      "Benchmarking of sci-rocket"
    ]
  },
  {
    "objectID": "workflows/1.benchmarking.html#import-of-benchmarking-logs",
    "href": "workflows/1.benchmarking.html#import-of-benchmarking-logs",
    "title": "Benchmarking of sci-rocket",
    "section": "Import of benchmarking logs",
    "text": "Import of benchmarking logs\nThe runtime, IO and memory usage of experiments are logged using the Snakemake benchmarking suite. We now import the benchmarking logs of the two cohorts.\n\n\nShow code\ndata_benchmark &lt;- dplyr::bind_rows(future.apply::future_lapply(files_benchmark, function(x){\n    data &lt;- readr::read_tsv(x, show_col_types = FALSE) %&gt;%\n        dplyr::mutate(\n            step = gsub('_test_.*', '', basename(x)),\n            step = gsub('_zebra.*|_mouse.*', '', step),\n            step = gsub('_sx42b.*', '', step),\n            experiment = dplyr::if_else(grepl('sx42b|mouse', x), 'FCG', 'Zebrafish (Hashing)')\n        )\n    return(data)\n}))\n\n# Calc. mean + SE\ndata_benchmark &lt;- data_benchmark %&gt;%\n    dplyr::group_by(step, experiment) %&gt;%\n    dplyr::summarise(\n        mean_m = mean(s / 60),\n        sd_m = sd(s / 60),\n        mean_io_in = mean(io_in / 1024),\n        sd_io_in = sd(io_in / 1024),\n        mean_io_out = mean(io_out / 1024),\n        sd_io_out = sd(io_out / 1024),\n        mean_max_rss = mean(max_rss / 1024),\n        sd_max_rss = sd(max_rss / 1024),\n        mean_mean_load = mean(mean_load / 100),\n        sd_mean_load = sd(mean_load / 100), .groups = 'keep'\n    ) %&gt;% \n    dplyr::mutate(\n        step = factor(step, levels = c('bcl2fastq', 'split_R1', 'split_R2', 'demultiplex_fastq_split', 'gather_demultiplexed_sequencing', 'gather_demultiplexed_samples', 'trim_fastp', 'generate_index_STAR', 'starSolo_align', 'sambamba_index', 'sci_dash')),\n        step = dplyr::recode_factor(\n            step,\n            bcl2fastq = 'Converting BCL (**bcl2fastq**)',\n            split_R1 = \"Splitting R1 into chunks\",\n            split_R2 = \"Splitting R2 into chunks\",\n            demultiplex_fastq_split = \"Barcode demultiplexing (on chunks)\",\n            gather_demultiplexed_sequencing = \"Merging experiment-based files\",\n            gather_demultiplexed_samples = \"Merging sample-based files\",\n            trim_fastp = \"Trimming (**fastp**)\",\n            generate_index_STAR = \"Generating alignment index (**STAR**)\",\n            starSolo_align = \"Alignment and UMI counting (**STARSolo**)\",\n            sambamba_index = \"Generating BAM indexes (**sambamba**)\",\n            sci_dash = \"Generating interactive dashboard\"\n        )\n    ) %&gt;% \n    dplyr::ungroup()\n\n\n\n\nShow code\ngenerate_benchmarking_plot(data_benchmark %&gt;% dplyr::filter(experiment == 'FCG'))\n\n\n\n\n\n\n\n\nFigure 1: Benchmarking of the FCG cohort\n\n\n\n\n\n\n\nShow code\ngenerate_benchmarking_plot(data_benchmark %&gt;% dplyr::filter(experiment != 'FCG'), ylimits_runtime = c(0, 45), nudge_runtime = 2.5, nudge_io = 2.5, ylimits_maxio_read = c(0,100), ylimits_maxio_write = c(0, 100))\n\n\n\n\n\n\n\n\nFigure 2: Benchmarking of the Zebrafish cohort",
    "crumbs": [
      "Benchmarking",
      "Benchmarking of sci-rocket"
    ]
  },
  {
    "objectID": "workflows/1.benchmarking.html#determine-speed-of-demultiplexing",
    "href": "workflows/1.benchmarking.html#determine-speed-of-demultiplexing",
    "title": "Benchmarking of sci-rocket",
    "section": "Determine speed of demultiplexing",
    "text": "Determine speed of demultiplexing\nUsing a single split chunk, we can determine the speed of de-multiplexing by checking the de-multiplexing time per 1M reads.\n\n\nShow code\nx &lt;- readr::read_tsv('~/DKFZ/odomLab/manuscript_scirocket/logs/step2_demultiplexing_reads/demultiplex_fastq_split_sx42b_1-of-25.log', col_names = 'line', show_col_types = FALSE) %&gt;%\n    dplyr::filter(grepl(\"INFO: Done:\", line)) %&gt;%\n    dplyr::mutate(\n        n_reads = as.integer(gsub(' read-pairs.*', '', gsub('.*INFO: Done: ', '', line))),\n        time = lubridate::as_datetime(gsub(' -.*', '', line))\n    )\n\nx$time &lt;- x$time - min(x$time)\n\nggplot2::ggplot(x, ggplot2::aes(x = n_reads, y = time)) +\n    ggplot2::geom_point(size = 1, shape = 21) +\n    ggplot2::scale_x_continuous(labels = scales::unit_format(suffix = ' million', scale = 0.000001), expand = c(0,0.01)) +\n    ggplot2::scale_y_continuous(limits = c(0, 12000), expand = c(0,0.01)) +\n    ggplot2::labs(x = 'No. read-pairs', y = 'Time (in seconds)') +\n    ggpubr::stat_cor(label.y = 11000, p.digits = 0, method = 'pearson', alternative = 'two.sided') +\n    theme_job\n\n\n\n\n\n\n\n\nFigure 3: De-multiplexing speed per 1M reads.",
    "crumbs": [
      "Benchmarking",
      "Benchmarking of sci-rocket"
    ]
  },
  {
    "objectID": "workflows/1.benchmarking.html#write-suppl.-table",
    "href": "workflows/1.benchmarking.html#write-suppl.-table",
    "title": "Benchmarking of sci-rocket",
    "section": "Write suppl. table",
    "text": "Write suppl. table\n\n\nShow code\ndata_xl &lt;- list('Demultiplexing' = cohorts, 'Benchmarking' = data_benchmark)\nopenxlsx::write.xlsx(data_xl, '~/DKFZ/odomLab/manuscript_scirocket/tables/SupplTable1.xlsx', asTable = TRUE)\n\n\n\nSession information\n\n\nShow code\nsessioninfo::session_info()\n\n\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.3.2 (2023-10-31)\n os       macOS Sonoma 14.3.1\n system   aarch64, darwin20\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       Europe/Berlin\n date     2024-03-11\n pandoc   3.1.12.2 @ /opt/homebrew/bin/ (via rmarkdown)\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package      * version date (UTC) lib source\n abind          1.4-5   2016-07-21 [1] CRAN (R 4.3.0)\n backports      1.4.1   2021-12-13 [1] CRAN (R 4.3.0)\n bit            4.0.5   2022-11-15 [1] CRAN (R 4.3.0)\n bit64          4.0.5   2020-08-30 [1] CRAN (R 4.3.0)\n broom          1.0.5   2023-06-09 [1] CRAN (R 4.3.0)\n car            3.1-2   2023-03-30 [1] CRAN (R 4.3.0)\n carData        3.0-5   2022-01-06 [1] CRAN (R 4.3.0)\n cli            3.6.2   2023-12-11 [1] CRAN (R 4.3.1)\n codetools      0.2-19  2023-02-01 [1] CRAN (R 4.3.2)\n colorspace     2.1-0   2023-01-23 [1] CRAN (R 4.3.0)\n commonmark     1.9.1   2024-01-30 [1] CRAN (R 4.3.1)\n crayon         1.5.2   2022-09-29 [1] CRAN (R 4.3.0)\n digest         0.6.34  2024-01-11 [1] CRAN (R 4.3.1)\n dplyr        * 1.1.4   2023-11-17 [1] CRAN (R 4.3.1)\n evaluate       0.23    2023-11-01 [1] CRAN (R 4.3.1)\n fansi          1.0.6   2023-12-08 [1] CRAN (R 4.3.1)\n farver         2.1.1   2022-07-06 [1] CRAN (R 4.3.0)\n fastmap        1.1.1   2023-02-24 [1] CRAN (R 4.3.0)\n future         1.33.1  2023-12-22 [1] CRAN (R 4.3.1)\n future.apply   1.11.1  2023-12-21 [1] CRAN (R 4.3.1)\n generics       0.1.3   2022-07-05 [1] CRAN (R 4.3.0)\n ggplot2        3.5.0   2024-02-23 [1] CRAN (R 4.3.1)\n ggpubr         0.6.0   2023-02-10 [1] CRAN (R 4.3.0)\n ggsignif       0.6.4   2022-10-13 [1] CRAN (R 4.3.0)\n ggtext         0.1.2   2022-09-16 [1] CRAN (R 4.3.0)\n globals        0.16.2  2022-11-21 [1] CRAN (R 4.3.0)\n glue           1.7.0   2024-01-09 [1] CRAN (R 4.3.1)\n gridtext       0.1.5   2022-09-16 [1] CRAN (R 4.3.0)\n gtable         0.3.4   2023-08-21 [1] CRAN (R 4.3.0)\n highr          0.10    2022-12-22 [1] CRAN (R 4.3.0)\n hms            1.1.3   2023-03-21 [1] CRAN (R 4.3.0)\n htmltools      0.5.7   2023-11-03 [1] CRAN (R 4.3.1)\n htmlwidgets    1.6.4   2023-12-06 [1] CRAN (R 4.3.1)\n hues           0.2.0   2019-12-01 [1] CRAN (R 4.3.0)\n jsonlite       1.8.8   2023-12-04 [1] CRAN (R 4.3.1)\n kableExtra     1.4.0   2024-01-24 [1] CRAN (R 4.3.1)\n knitr          1.45    2023-10-30 [1] CRAN (R 4.3.1)\n labeling       0.4.3   2023-08-29 [1] CRAN (R 4.3.0)\n lifecycle      1.0.4   2023-11-07 [1] CRAN (R 4.3.1)\n listenv        0.9.1   2024-01-29 [1] CRAN (R 4.3.1)\n lubridate      1.9.3   2023-09-27 [1] CRAN (R 4.3.1)\n magrittr       2.0.3   2022-03-30 [1] CRAN (R 4.3.0)\n markdown       1.12    2023-12-06 [1] CRAN (R 4.3.1)\n munsell        0.5.0   2018-06-12 [1] CRAN (R 4.3.0)\n openxlsx       4.2.5.2 2023-02-06 [1] CRAN (R 4.3.0)\n parallelly     1.37.1  2024-02-29 [1] CRAN (R 4.3.1)\n patchwork    * 1.2.0   2024-01-08 [1] CRAN (R 4.3.1)\n pillar         1.9.0   2023-03-22 [1] CRAN (R 4.3.0)\n pkgconfig      2.0.3   2019-09-22 [1] CRAN (R 4.3.0)\n purrr          1.0.2   2023-08-10 [1] CRAN (R 4.3.0)\n R6             2.5.1   2021-08-19 [1] CRAN (R 4.3.0)\n Rcpp           1.0.12  2024-01-09 [1] CRAN (R 4.3.1)\n readr          2.1.5   2024-01-10 [1] CRAN (R 4.3.1)\n rlang          1.1.3   2024-01-10 [1] CRAN (R 4.3.1)\n rmarkdown      2.26    2024-03-05 [1] CRAN (R 4.3.1)\n rstatix        0.7.2   2023-02-01 [1] CRAN (R 4.3.0)\n rstudioapi     0.15.0  2023-07-07 [1] CRAN (R 4.3.0)\n scales         1.3.0   2023-11-28 [1] CRAN (R 4.3.1)\n sessioninfo    1.2.2   2021-12-06 [1] CRAN (R 4.3.0)\n stringi        1.8.3   2023-12-11 [1] CRAN (R 4.3.1)\n stringr        1.5.1   2023-11-14 [1] CRAN (R 4.3.1)\n svglite        2.1.3   2023-12-08 [1] CRAN (R 4.3.1)\n systemfonts    1.0.5   2023-10-09 [1] CRAN (R 4.3.1)\n tibble         3.2.1   2023-03-20 [1] CRAN (R 4.3.0)\n tidyr          1.3.1   2024-01-24 [1] CRAN (R 4.3.1)\n tidyselect     1.2.0   2022-10-10 [1] CRAN (R 4.3.0)\n timechange     0.3.0   2024-01-18 [1] CRAN (R 4.3.1)\n tzdb           0.4.0   2023-05-12 [1] CRAN (R 4.3.0)\n utf8           1.2.4   2023-10-22 [1] CRAN (R 4.3.1)\n vctrs          0.6.5   2023-12-01 [1] CRAN (R 4.3.1)\n viridisLite    0.4.2   2023-05-02 [1] CRAN (R 4.3.0)\n vroom          1.6.5   2023-12-05 [1] CRAN (R 4.3.1)\n withr          3.0.0   2024-01-16 [1] CRAN (R 4.3.1)\n xfun           0.42    2024-02-08 [1] CRAN (R 4.3.1)\n xml2           1.3.6   2023-12-04 [1] CRAN (R 4.3.1)\n yaml           2.3.8   2023-12-11 [1] CRAN (R 4.3.1)\n zip            2.3.1   2024-01-27 [1] CRAN (R 4.3.1)\n\n [1] /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/library\n\n──────────────────────────────────────────────────────────────────────────────",
    "crumbs": [
      "Benchmarking",
      "Benchmarking of sci-rocket"
    ]
  }
]